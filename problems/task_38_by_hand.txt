#ip 5
ip=0 addi 5 16 5
ip=1 seti 1 7 3
ip=2 seti 1 4 1
ip=3 mulr 3 1 4
ip=4 eqrr 4 2 4
ip=5 addr 4 5 5
ip=6 addi 5 1 5
ip=7 addr 3 0 0
ip=8 addi 1 1 1
ip=9 gtrr 1 2 4
ip=10 addr 5 4 5
ip=11 seti 2 1 5
ip=12 addi 3 1 3
ip=13 gtrr 3 2 4
ip=14 addr 4 5 5
ip=15 seti 1 4 5
ip=16 mulr 5 5 5
ip=17 addi 2 2 2
ip=18 mulr 2 2 2
ip=19 mulr 5 2 2
ip=20 muli 2 11 2
ip=21 addi 4 1 4
ip=22 mulr 4 5 4
ip=23 addi 4 19 4
ip=24 addr 2 4 2
ip=25 addr 5 0 5
ip=26 seti 0 9 5
ip=27 setr 5 7 4
ip=28 mulr 4 5 4
ip=29 addr 5 4 4
ip=30 mulr 5 4 4
ip=31 muli 4 14 4
ip=32 mulr 4 5 4
ip=33 addr 2 4 2
ip=34 seti 0 9 0
ip=35 seti 0 6 5


// Annotation

IP: 5

// Initialization steps
ip=0 [1, 0, 0, 0, 0, 0, ] addi 5 16 5  [1, 0, 0, 0, 0, 16, ]
// Jump ahead 16.
ip=17 [1, 0, 0, 0, 0, 17, ] addi 2 2 2  [1, 0, 2, 0, 0, 17, ]
// reg2 = 2;
ip=18 [1, 0, 2, 0, 0, 18, ] mulr 2 2 2  [1, 0, 4, 0, 0, 18, ]
// reg2 = reg2*reg2;
ip=19 [1, 0, 4, 0, 0, 19, ] mulr 5 2 2  [1, 0, 76, 0, 0, 19, ]
// reg2 = 19*reg2; (19 is ip..)
ip=20 [1, 0, 76, 0, 0, 20, ] muli 2 11 2  [1, 0, 836, 0, 0, 20, ]
// reg2 = 11*reg2;
ip=21 [1, 0, 836, 0, 0, 21, ] addi 4 1 4  [1, 0, 836, 0, 1, 21, ]
// reg4 = 1;
ip=22 [1, 0, 836, 0, 1, 22, ] mulr 4 5 4  [1, 0, 836, 0, 22, 22, ]
// reg4 = 22*reg4; (22 is ip..)
ip=23 [1, 0, 836, 0, 22, 23, ] addi 4 19 4  [1, 0, 836, 0, 41, 23, ]
// reg4 = reg4+19;
ip=24 [1, 0, 836, 0, 41, 24, ] addr 2 4 2  [1, 0, 877, 0, 41, 24, ]
// reg2 = reg4+reg2;
ip=25 [1, 0, 877, 0, 41, 25, ] addr 5 0 5  [1, 0, 877, 0, 41, 26, ]
// Divergence! now program 2.
ip=27 [1, 0, 877, 0, 41, 27, ] setr 5 7 4  [1, 0, 877, 0, 27, 27, ]
// reg4 = 27; (27 is ip)..
ip=28 [1, 0, 877, 0, 27, 28, ] mulr 4 5 4  [1, 0, 877, 0, 756, 28, ]
// reg4 = reg4*28; (28 is ip)..
ip=29 [1, 0, 877, 0, 756, 29, ] addr 5 4 4  [1, 0, 877, 0, 785, 29, ]
// reg4 = reg4+29; (29 is ip)..
ip=30 [1, 0, 877, 0, 785, 30, ] mulr 5 4 4  [1, 0, 877, 0, 23550, 30, ]
// reg4 = reg4*30; (30 is ip)..
ip=31 [1, 0, 877, 0, 23550, 31, ] muli 4 14 4  [1, 0, 877, 0, 329700, 31, ]
// reg4 = reg4*14;
ip=32 [1, 0, 877, 0, 329700, 32, ] mulr 4 5 4  [1, 0, 877, 0, 10550400, 32, ]
// reg4 = reg4*32;
ip=33 [1, 0, 877, 0, 10550400, 33, ] addr 2 4 2  [1, 0, 10551277, 0, 10550400, 33, ]
// reg2 = reg2+reg4;
// State at this point..
// reg2 = 10551277;
// reg4 = 10550400;

// Set register 0 to 0 and go to beginning
ip=34 [1, 0, 10551277, 0, 10550400, 34, ] seti 0 9 0  [0, 0, 10551277, 0, 10550400, 34, ]
// reg0 = 0;
ip=35 [0, 0, 10551277, 0, 10550400, 35, ] seti 0 6 5  [0, 0, 10551277, 0, 10550400, 0, ]
// reg5 = 0; Jump to beginning.

// Set loop increment variables.
ip=1 [0, 0, 10551277, 0, 10550400, 1, ] seti 1 7 3  [0, 0, 10551277, 1, 10550400, 1, ]
// reg3 = 1; // Start increment? loop 1?

mark H
ip=2 [0, 0, 10551277, 1, 10550400, 2, ] seti 1 4 1  [0, 1, 10551277, 1, 10550400, 2, ]
// reg1 = 1; // Start increment? loop 2?

Mark A
ip=3 [0, 1, 10551277, 1, 10550400, 3, ] mulr 3 1 4  [0, 1, 10551277, 1, 1, 3, ]
// reg4 = reg3*reg1;
ip=4 [0, 1, 10551277, 1, 1, 4, ] eqrr 4 2 4  [0, 1, 10551277, 1, 0, 4, ]
// if(reg2==reg4) goto B; else goto C;
ip=5 [0, 1, 10551277, 1, 0, 5, ] addr 4 5 5  [0, 1, 10551277, 1, 0, 5, ]
// reg5 = reg4+reg5; // This doesn't do anything if reg2 != reg4 from above.
ip=6 [0, 1, 10551277, 1, 0, 6, ] addi 5 1 5  [0, 1, 10551277, 1, 0, 7, ]
// jump ahead by one.

// Branch 1
mark B
ip=7 addr 3 0 0 // reg0 += reg3;

// Branch 2
mark C
ip=8 [0, 1, 10551277, 1, 0, 8, ] addi 1 1 1  [0, 2, 10551277, 1, 0, 8, ] // reg1 += 1;

ip=9 [0, 2, 10551277, 1, 0, 9, ] gtrr 1 2 4  [0, 2, 10551277, 1, 0, 9, ]
// if (reg1 > reg2) goto E; else goto D;
ip=10 [0, 2, 10551277, 1, 0, 10, ] addr 5 4 5  [0, 2, 10551277, 1, 0, 10, ]
// reg5 = reg4+reg5; // Doesn't do anything if reg1 > reg2.

mark D
ip=11 [0, 2, 10551277, 1, 0, 11, ] seti 2 1 5  [0, 2, 10551277, 1, 0, 2, ] // goto A (ip=3)

mark E
ip=12 addi 3 1 3 //reg3 += 1;
ip=13 gtrr 3 2 4
if(reg3 > reg2) reg4=1; else reg4=0;
ip=14 addr 4 5 5 // reg5 += reg4;

mark F
ip=15 seti 1 4 5 // goto ip=2

mark G
ip=16 mulr 5 5 5 // goto 16*16 = 256?? End of program?

ip=3 [0, 2, 10551277, 1, 0, 3, ] mulr 3 1 4  [0, 2, 10551277, 1, 2, 3, ]
// reg4 = reg3*reg1;
ip=4 [0, 2, 10551277, 1, 2, 4, ] eqrr 4 2 4  [0, 2, 10551277, 1, 0, 4, ]
// if(reg4 == reg2) reg4=1; else reg4=0;
ip=5 [0, 2, 10551277, 1, 0, 5, ] addr 4 5 5  [0, 2, 10551277, 1, 0, 5, ]
// reg5 = reg4+reg5; // skipped if above is satisfied.
ip=6 [0, 2, 10551277, 1, 0, 6, ] addi 5 1 5  [0, 2, 10551277, 1, 0, 7, ]
// jump 1 instruction
ip=8 [0, 2, 10551277, 1, 0, 8, ] addi 1 1 1  [0, 3, 10551277, 1, 0, 8, ]
// reg1 += 1
ip=9 [0, 3, 10551277, 1, 0, 9, ] gtrr 1 2 4  [0, 3, 10551277, 1, 0, 9, ]
ip=10 [0, 3, 10551277, 1, 0, 10, ] addr 5 4 5  [0, 3, 10551277, 1, 0, 10, ]
ip=11 [0, 3, 10551277, 1, 0, 11, ] seti 2 1 5  [0, 3, 10551277, 1, 0, 2, ]
ip=3 [0, 3, 10551277, 1, 0, 3, ] mulr 3 1 4  [0, 3, 10551277, 1, 3, 3, ]
ip=4 [0, 3, 10551277, 1, 3, 4, ] eqrr 4 2 4  [0, 3, 10551277, 1, 0, 4, ]
ip=5 [0, 3, 10551277, 1, 0, 5, ] addr 4 5 5  [0, 3, 10551277, 1, 0, 5, ]
Cutting to the chase: result from program 2: 0


---------

reg2 = 10551277
reg3 = 1

mark H
reg1 = 1

mark A
reg4 = reg3*reg1;
if(reg2==reg4) goto B; else goto C;

mark B
reg0 += reg3;

mark C
reg1 += 1;
if (reg1 > reg2) goto E; else goto D;

mark D
goto A;

mark E
reg3 += 1;
if(reg3 > reg2) goto G; else goto H;

mark G
end

---------

x =  10551277 // reg2
result = 0 // reg0
i = 1 // reg3
mark H
j = 1 // reg1
mark A
if(x == i*j) {
    goto B
} else {
    goto C
}
mark B
result += i
mark C
j += 1
if(j > x) {
goto E
} else {
goto A
}
mark E
i += 1
if(i > x) {
goto G
} else {
goto H
}

mark H
end

---------

x =  10551277 // reg2
result = 0 // reg0
i = 1 // reg3
do {
    j = 1 // reg1
    do {
        if(x == i*j) {
            result += i
        }
        j += 1
    } while(j <= x); // Same as (j < x), elims marks A,B, and C.
    i += 1
} while(i <= x); // whats written is the same as (i > x), elims marks H,G.
end

--------

result will be the sum of all prime factors of 10551277 inluding 1 and itself.
The prime factors are 11 and 959207, so the answer is
1+11+959207+10551277 = 11510496
